{"version":3,"sources":["Components/Map/Map.js","Components/Container/Container.js","Components/Home/Home.js","App.js","serviceWorker.js","index.js"],"names":["MapContainer","props","state","showingInfoWindow","activeMarker","selectedPlace","cities","coordinates","city","onMarkerClick","bind","this","setCoordinates","console","log","map","event","index","Geocode","setApiKey","setLanguage","enableDebug","fromAddress","City","then","response","data","results","geometry","location","latitude","lat","longitude","lng","position","marker","e","setState","google","style","minWwidth","minHeight","zoom","initialCenter","visible","name","PureComponent","GoogleApiWrapper","apiKey","v","Container","optionChanged","selectedValue","target","value","bigCities","i","length","State","push","states","arr","Map","forEach","ele","set","values","axios","get","res","removeDuplicates","slice","key","optionItems","Row","className","FormGroup","Input","type","id","onChange","Col","xs","Component","Home","to","class","App","exact","path","component","Cards","Boolean","window","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3a3bdd58.chunk.js","sourcesContent":["import React, { PureComponent } from \"react\";\r\n\r\nimport Geocode from \"react-geocode\";\r\n\r\nimport { Map, InfoWindow, Marker, GoogleApiWrapper } from \"google-maps-react\";\r\n\r\nexport class MapContainer extends PureComponent {\r\n\r\n  constructor(props) {\r\n    super(props);\r\n    \r\n    this.state = {\r\n      showingInfoWindow: false,\r\n      activeMarker: {},\r\n      selectedPlace: {},\r\n      cities: [],\r\n      coordinates: [],\r\n      city : []\r\n    };\r\n    this.onMarkerClick = this.onMarkerClick.bind(this);\r\n  }\r\n\r\n  componentDidMount(props){\r\n      this.setCoordinates(props)\r\n  }\r\n\r\n  setCoordinates(props){\r\n\r\n    console.log(\"called setcoordinates\")\r\n\r\n    this.props.cities.map((event, index) =>{\r\n\r\n        Geocode.setApiKey(\"AIzaSyAW4mUGkkn09URppxeMpfR-Fz1k6kRVzFc\");\r\n        Geocode.setLanguage(\"en\");\r\n        Geocode.enableDebug();\r\n        Geocode.fromAddress(event.City)\r\n        \r\n        .then(response => {\r\n          const data = response.results[0].geometry.location\r\n          console.log(data)\r\n          const latitude = data.lat\r\n          const longitude = data.lng\r\n\r\n          console.log(latitude)\r\n\r\n          // this.setState({\r\n          //   coordinates: [...this.state.coordinates, data.lng]\r\n          //   }, ()=>console.log(\"object\"))     \r\n\r\n          return  (\r\n            <Marker\r\n              position={{lat: latitude, lng: longitude}} \r\n              />\r\n          ) \r\n        })\r\n\r\n    })\r\n\r\n\r\n    \r\n}\r\n\r\n  onMarkerClick(props, marker, e) {\r\n    this.setState({\r\n      selectedPlace: props,\r\n      activeMarker: marker,\r\n      showingInfoWindow: true\r\n    });\r\n  }\r\n  \r\n  render(props) {\r\n    \r\n    console.log(this.state.city)\r\n\r\n    // {this.setCoordinates()}\r\n    if (!this.props.google) {\r\n      return <div>Loading...</div>;\r\n    }\r\n\r\n    return (\r\n      <div>\r\n        <Map\r\n          style={{\r\n            minWwidth: \"95%\",\r\n            minHeight: \"200px\"\r\n          }}\r\n          google={this.props.google}\r\n          zoom={4}\r\n          initialCenter={{\r\n            lat: 20.5937,\r\n            lng: 78.9629\r\n          }}\r\n        >\r\n            <Marker\r\n              position={{lat: 20.5937, lng: 78.9629}} \r\n            />\r\n          {this.setCoordinates()}\r\n          <InfoWindow\r\n            marker={this.state.activeMarker}\r\n            visible={this.state.showingInfoWindow}\r\n          >\r\n            <div>\r\n              <h1>{this.state.selectedPlace.name}</h1>\r\n            </div>\r\n          </InfoWindow>\r\n        </Map>\r\n      </div>\r\n    );\r\n  }\r\n}\r\nexport default GoogleApiWrapper({\r\n  apiKey: \"AIzaSyAm3EVXc70Hu9ZpTGEaIARDZ9VYS0p0D_s\",\r\n  v: \"3\"\r\n})(MapContainer);\r\n","import React, {Component} from 'react';\r\nimport axios from 'axios'\r\nimport {Row, Col, FormGroup, Input} from 'reactstrap';\r\n\r\nimport MapContainer from '../Map/Map'\r\n\r\n\r\nimport './Container.scss'\r\n\r\nclass Container extends Component {\r\n    constructor(props) {\r\n        super(props)\r\n    \r\n        this.state = {\r\n             data: [],\r\n             states: [],\r\n             selectedValue: 'Select',\r\n             cities: []\r\n        }\r\n    }\r\n\r\n\r\n    removeDuplicates(arr) {\r\n        const map = new Map();\r\n        arr.forEach(ele => map.set(ele.State, ele)) \r\n        return [...map.values()];\r\n    }\r\n\r\n    optionChanged = event => {\r\n        // console.log(value);\r\n        this.setState({ selectedValue: event.target.value });\r\n        const {data} = this.state\r\n        let bigCities = [];\r\n        for (let i = 0; i < data.length; i++) {\r\n            if (data[i].State === event.target.value) {\r\n                bigCities.push(data[i]);\r\n            }\r\n        }\r\n        this.setState({cities: bigCities})\r\n      }\r\n  \r\n\r\n    componentDidMount(){\r\n        axios.get(\"https://indian-cities-api-nocbegfhqg.now.sh/cities\")\r\n        .then(res =>{\r\n            const data = res.data;\r\n            this.setState({data: data})\r\n            this.setState({ states: this.removeDuplicates(data) });\r\n        })\r\n            \r\n    }\r\n    \r\n    render() {\r\n        const data = (this.state.cities).slice(0, 40)\r\n\r\n        let city = this.state.cities.map((event, index) => <li key={index}>{event.City}</li>)\r\n        \r\n        let optionItems = this.state.states.map((name, index) =>\r\n                <option           \r\n                    value={name.State}\r\n                    key={index}\r\n                >\r\n                    {name.State}\r\n                </option>\r\n            );\r\n\r\n        return (\r\n            <div>\r\n                <Row>\r\n                    <div className=\"instruction_box\">\r\n                        <p>Please select the city to view the location</p>\r\n                    </div>\r\n                </Row>\r\n                <Row>\r\n                    <FormGroup>\r\n                        <Input \r\n                            value=\"Select\"\r\n                            type=\"select\" \r\n                            name=\"select\" \r\n                            id=\"exampleSelect\" \r\n                            onChange={this.optionChanged}\r\n                            >\r\n                            {optionItems}\r\n                        </Input>\r\n                    </FormGroup>\r\n                </Row>\r\n                <Row>\r\n                    <Col xs=\"6\">\r\n                        <div className=\"city_container\">\r\n                            <p>List of cities </p>\r\n                            <ul>{city}</ul> \r\n                        </div>\r\n                        </Col>  \r\n                    <Col xs=\"6\">\r\n                        <div className=\"map_container\">\r\n                            <MapContainer cities={data} />\r\n                        </div>\r\n                    </Col>\r\n                </Row>\r\n            </div>\r\n        )\r\n    }\r\n}\r\n\r\nexport default Container\r\n","import React from 'react'\r\nimport { Link } from 'react-router-dom'\r\nimport './Home.scss'\r\n\r\nfunction Home() {\r\n    return (\r\n        <div className=\"site-wrapper\">\r\n\r\n        <div className=\"site-wrapper-inner\">\r\n  \r\n          <div className=\"container\">\r\n  \r\n            <div className=\"inner cover\">\r\n              <h1 className=\"cover-heading\">Statewise City Location Lister</h1>\r\n              <p className=\"lead\">Interface to view the cities on google map on selecting the state</p>\r\n              <p className=\"lead\">\r\n                <Link to=\"/users\" class=\"btn btn-lg btn-default\">See all cities</Link>\r\n              </p>\r\n            </div>\r\n  \r\n          </div>\r\n  \r\n        </div>\r\n  \r\n      </div>\r\n    )\r\n}\r\n\r\nexport default Home\r\n","import React from 'react';\r\nimport {BrowserRouter as Router, Switch, Route, Link} from \"react-router-dom\";\r\nimport './App.css';\r\nimport Cards from './Components/Container/Container'\r\nimport Home from './Components/Home/Home'\r\n\r\nfunction App() {\r\n  return (\r\n      <div className=\"App\">\r\n        <Router>\r\n          <nav className=\"navbar navbar-inverse\">\r\n            <div className=\"container-fluid\">\r\n              <div className=\"navbar-header\">\r\n                <Link to=\"/\">Artivatic</Link>\r\n              </div>\r\n            </div>\r\n          </nav>\r\n          \r\n            <Switch>\r\n              <Route exact path=\"/\" component={Home} />\r\n              <Route exact path=\"/users\" component={Cards} />\r\n            </Switch>\r\n          </Router>\r\n\r\n      </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","// This optional code is used to register a service worker.\r\n// register() is not called by default.\r\n\r\n// This lets the app load faster on subsequent visits in production, and gives\r\n// it offline capabilities. However, it also means that developers (and users)\r\n// will only see deployed updates on subsequent visits to a page, after all the\r\n// existing tabs open on the page have been closed, since previously cached\r\n// resources are updated in the background.\r\n\r\n// To learn more about the benefits of this model and instructions on how to\r\n// opt-in, read https://bit.ly/CRA-PWA\r\n\r\nconst isLocalhost = Boolean(\r\n  window.location.hostname === 'localhost' ||\r\n    // [::1] is the IPv6 localhost address.\r\n    window.location.hostname === '[::1]' ||\r\n    // 127.0.0.0/8 are considered localhost for IPv4.\r\n    window.location.hostname.match(\r\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\r\n    )\r\n);\r\n\r\nexport function register(config) {\r\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\r\n    // The URL constructor is available in all browsers that support SW.\r\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\r\n    if (publicUrl.origin !== window.location.origin) {\r\n      // Our service worker won't work if PUBLIC_URL is on a different origin\r\n      // from what our page is served on. This might happen if a CDN is used to\r\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\r\n      return;\r\n    }\r\n\r\n    window.addEventListener('load', () => {\r\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\r\n\r\n      if (isLocalhost) {\r\n        // This is running on localhost. Let's check if a service worker still exists or not.\r\n        checkValidServiceWorker(swUrl, config);\r\n\r\n        // Add some additional logging to localhost, pointing developers to the\r\n        // service worker/PWA documentation.\r\n        navigator.serviceWorker.ready.then(() => {\r\n          console.log(\r\n            'This web app is being served cache-first by a service ' +\r\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\r\n          );\r\n        });\r\n      } else {\r\n        // Is not localhost. Just register service worker\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    });\r\n  }\r\n}\r\n\r\nfunction registerValidSW(swUrl, config) {\r\n  navigator.serviceWorker\r\n    .register(swUrl)\r\n    .then(registration => {\r\n      registration.onupdatefound = () => {\r\n        const installingWorker = registration.installing;\r\n        if (installingWorker == null) {\r\n          return;\r\n        }\r\n        installingWorker.onstatechange = () => {\r\n          if (installingWorker.state === 'installed') {\r\n            if (navigator.serviceWorker.controller) {\r\n              // At this point, the updated precached content has been fetched,\r\n              // but the previous service worker will still serve the older\r\n              // content until all client tabs are closed.\r\n              console.log(\r\n                'New content is available and will be used when all ' +\r\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\r\n              );\r\n\r\n              // Execute callback\r\n              if (config && config.onUpdate) {\r\n                config.onUpdate(registration);\r\n              }\r\n            } else {\r\n              // At this point, everything has been precached.\r\n              // It's the perfect time to display a\r\n              // \"Content is cached for offline use.\" message.\r\n              console.log('Content is cached for offline use.');\r\n\r\n              // Execute callback\r\n              if (config && config.onSuccess) {\r\n                config.onSuccess(registration);\r\n              }\r\n            }\r\n          }\r\n        };\r\n      };\r\n    })\r\n    .catch(error => {\r\n      console.error('Error during service worker registration:', error);\r\n    });\r\n}\r\n\r\nfunction checkValidServiceWorker(swUrl, config) {\r\n  // Check if the service worker can be found. If it can't reload the page.\r\n  fetch(swUrl, {\r\n    headers: { 'Service-Worker': 'script' },\r\n  })\r\n    .then(response => {\r\n      // Ensure service worker exists, and that we really are getting a JS file.\r\n      const contentType = response.headers.get('content-type');\r\n      if (\r\n        response.status === 404 ||\r\n        (contentType != null && contentType.indexOf('javascript') === -1)\r\n      ) {\r\n        // No service worker found. Probably a different app. Reload the page.\r\n        navigator.serviceWorker.ready.then(registration => {\r\n          registration.unregister().then(() => {\r\n            window.location.reload();\r\n          });\r\n        });\r\n      } else {\r\n        // Service worker found. Proceed as normal.\r\n        registerValidSW(swUrl, config);\r\n      }\r\n    })\r\n    .catch(() => {\r\n      console.log(\r\n        'No internet connection found. App is running in offline mode.'\r\n      );\r\n    });\r\n}\r\n\r\nexport function unregister() {\r\n  if ('serviceWorker' in navigator) {\r\n    navigator.serviceWorker.ready\r\n      .then(registration => {\r\n        registration.unregister();\r\n      })\r\n      .catch(error => {\r\n        console.error(error.message);\r\n      });\r\n  }\r\n}\r\n","import React from 'react';\r\nimport ReactDOM from 'react-dom';\r\nimport './index.css';\r\nimport App from './App';\r\nimport * as serviceWorker from './serviceWorker';\r\n\r\nimport 'bootstrap/dist/css/bootstrap.min.css';\r\n\r\n\r\nReactDOM.render(\r\n  <>\r\n    <App />\r\n  </>,\r\n  document.getElementById('root')\r\n);\r\n\r\n// If you want your app to work offline and load faster, you can change\r\n// unregister() to register() below. Note this comes with some pitfalls.\r\n// Learn more about service workers: https://bit.ly/CRA-PWA\r\nserviceWorker.unregister();\r\n"],"sourceRoot":""}